public class Encrypt 
{
	
	/**
	 * Encrypts message by changing the letters, or summat
	 * @param blah
	 * @return returns a string with letters of the alphabet offset by 5. 
	 */
	public static String encryptString(String toEncrypt)
	{
		char[] blahBlah = toEncrypt.toCharArray();
		for (int i = 0; i < blahBlah.length; i++)
		{
			//toEncrypt[i] = (char)(65 + ((i+5)%26));
			if ((blahBlah[i] < 91 && blahBlah[i] > 64))
			{
				blahBlah[i] = (char)(65 + ((blahBlah[i] - 60) % 26));
			}
			else if (blahBlah[i] > 96 && blahBlah[i] < 123)
			{
				blahBlah[i] = (char)(97 + ((blahBlah[i] - 92) % 26));
			}
		}
		toEncrypt = new String(blahBlah);
		System.out.println(toEncrypt);
		return toEncrypt;
	}
	
	/**
	 * 
	 * @param replaceText
	 * @param offset offset = 1 means A becomes B. offset = -1 returns the same as offset = 25.
	 * @return
	 */
	public static String encryptString(String toEncrypt, int offset)
	{
		if (offset % 26 < 0)
		{
			offset = 26 + offset%26;
		}
		
		char[] blahBlah = toEncrypt.toCharArray();
		
		for (int i = 0; i < blahBlah.length; i++)
		{
			//blah[i] = (char)(65 + ((i+5)%26));
			
			/*if ((blahBlah[i] < 91 && blahBlah[i] > 64))
			{
				blahBlah[i] = (char)(65 + ((blahBlah[i] - (65 - offset%26)) % 26));
			}
			
			else if (blahBlah[i] > 96 && blahBlah[i] < 123)
			{
				blahBlah[i] = (char)(97 + ((blahBlah[i] - (97 - offset%26)) % 26));
			}*/
			
			if ((blahBlah[i] <= 'Z' && blahBlah[i] >= 'A'))
			{
				blahBlah[i] = (char)('A' + ((blahBlah[i] - ('A' - offset)) % 26));
			}
			
			//65 - 135 = -70... Assume blahBlah[i] is 'D'. 68 -- 70 = 68 + 70 = 138... 138 % 26 = 8... 8 + 65 = 73 = 'I'
			
			//simple way of looking at it is that there are two offsets. D - A = 3... offset 135 + 3 = 138. 138 % 26 = 8
			
			else if (blahBlah[i] >= 'a' && blahBlah[i] <= 'z')
			{
				blahBlah[i] = (char)('a' + ((blahBlah[i] - ('a' - offset)) % 26));
			}
		}
		toEncrypt = new String(blahBlah);
		return toEncrypt;
	}
}


import java.util.Scanner;


public class Decrypt 
{
	
	/**
	 * use when offset is unknown. Runs through all cases
	 * @throws Exception 
	 */
	@SuppressWarnings("resource")
	public static String decryptString(String toDecrypt) throws Exception
	{
		Scanner input = new Scanner(System.in);
		for (int i = 0; i < 26; i++)
		{
			toDecrypt = Encrypt.encryptString(toDecrypt, 1);
			System.out.println(toDecrypt);
			System.out.println("If you have what you're looking for, enter 1. Enter anything else to continue.");
			if (input.nextLine().equals("1"))
			{
				return toDecrypt;
			}
		}
		
		input.close();
		throw new Exception();
	}
	
	/**
	 * Use for known encryption offset. Same as calling method encryptString(toDecrypt, 26 - encryptionOffset)
	 * @param toDecrypt String to decipher.
	 * @param encryptionOffset VERY IMPORTANT. This is the offset by which the string has been encrypted.
	 */
	public static String decryptString(String toDecrypt, int encryptionOffset)
	{
		return Encrypt.encryptString(toDecrypt, 26 - encryptionOffset);
	}
}

public class CreateFile 
{
	public static boolean checkFilename(String filename)
	{
		for (int i = 0; i < filename.length(); i++)
		{
			if (!(Character.isLetterOrDigit(filename.charAt(i))) && (filename.charAt(i) != '_'))
			{
				System.out.println("Invalid filename.");
				return false;
			}
		}
		return true;
	}
}

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.InputMismatchException;
import java.util.Scanner;



public class Demo 
{
	public static void main(String[] args) 
	{
		String raw = "";
		Scanner input = new Scanner(System.in);
		boolean noExceptionThrown = false;
		do 
		{
			System.out.println("Please enter the exact filename of the .txt file you would like to encrypt, EXCLUDING the .txt extension.");
			try 
			{
				File file = new File(input.nextLine() + ".txt");
				Scanner fileInput = new Scanner(file);
				noExceptionThrown = !noExceptionThrown;

				while (fileInput.hasNextLine()) 
				{
					raw += fileInput.nextLine() + " ";
				}

				while (fileInput.hasNext()) 
				{
					raw += fileInput.next() + " ";
				}
				fileInput.close();

				if (raw.isEmpty()) 
				{
					System.out.println("There is no text in your file.");
					return;
				}
				System.out.println(raw);
				
			}

			catch (FileNotFoundException e) 
			{
				System.out.println("File not found. Please make sure your file is a properly named .txt file, and is placed in the following directory.");
				System.out.println(System.getProperty("user.dir"));
			}
		}while (!noExceptionThrown);
		noExceptionThrown = !noExceptionThrown;
		
		int choice = 0;
		do 
		{
			System.out.println("If you would like to encrypt this file, please enter 1.\nIf you would like to decrypt it but don't know the offset of encryption, please enter 2.\n"
					+ "If you would like to decrypt it, and know the offset of encryption, please enter 3.");
			try 
			{
				choice = input.nextInt();
				noExceptionThrown = !noExceptionThrown;
			} 
			catch (InputMismatchException e) 
			{
				input.nextLine();
				System.out.println("Invalid entry. Please enter an integer.");
			}
		}while (!noExceptionThrown);
		noExceptionThrown = !noExceptionThrown;
		
		switch(choice)
		{
		case 1:
			System.out.println("Please enter an offset value.");
			do 
			{
				try 
				{
					int offset = input.nextInt();
					input.nextLine();
					raw = Encrypt.encryptString(raw, offset);
					noExceptionThrown = !noExceptionThrown;
				} 
				catch (InputMismatchException e) 
				{
					input.nextLine();
					System.out.println("Invalid entry. Please enter an integer.");
				}
			}while (!noExceptionThrown);
			noExceptionThrown = !noExceptionThrown;
			break;
			
		case 2: 
			try 
			{
				raw = Decrypt.decryptString(raw);
				input.nextLine();	
			} 
			catch (Exception e1) 
			{
				System.out.println("All possibilities covered.\n\nPerhaps nonsense has been entered, or the input has undergone further encryption beyond the capabilities of this method.\n"
						+ "Alternatively, this may be the wrong method of decryption altogether.");
				input.close();
				return;
			}
			break;
			
		case 3:
			do 
			{
				System.out.println("Please enter the offset value of encryption.");
				try 
				{
					int offset = input.nextInt();
					input.nextLine();
					raw = Decrypt.decryptString(raw, offset);
					noExceptionThrown = !noExceptionThrown;
				}
				
				catch (InputMismatchException e) 
				{
					input.nextLine();
					System.out.println("Invalid entry. Please enter an integer.");
				}
			}while (!noExceptionThrown);
			noExceptionThrown = !noExceptionThrown;
			break;
			
		default:
			System.out.println("The number you have entered does not correspond to any of the provided choices. Please try again.");
			break;
		}

		/*char alphabet[] = new char[26];
		for (char i = 0101, j = 0; j < alphabet.length; i++)
		{
			alphabet[j] = i;
			System.out.println(alphabet[j++]);
		}
		
		System.out.println();
		
//		alphabet.toString().replace(0101, 0106)
		
		char encryptedAlphabet[] = new char[26];
		
		for (int i = 0; i < alphabet.length; i++)
		{
			encryptedAlphabet[i] = (char)(65 + ((i+5)%26));
			System.out.println(encryptedAlphabet[i]);
		}
		System.out.println();
	//	System.out.println(Encrypt.encryptString(alphabet));
*/		
		/*String charlie = "Hello, I have a name, though most people wouldn't know it by looking at me.";
		System.out.println(charlie);
		Encrypt.encryptString(charlie);
		
		String charlie1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		Encrypt.encryptString(charlie1, 135);
		Encrypt.encryptString(charlie1, -1);
		
		charlie = (Encrypt.encryptString(charlie, -21));
		Decrypt.decryptString(charlie, -21);
		Decrypt.decryptString(charlie);*/
	/*	
		PrintStream output;
		try 
		{
			output = new PrintStream(new FileOutputStream("output.txt"));
			System.setOut(output);
			output.print(raw);
		} 
		catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		
		String filename;
		do 
		{
			System.out.println("Please enter a filename to create for output. Only numbers, letters, and underscore are acceptable characters. Exclude file extension."
					+ "\nNB. This will create a .txt file that will overwrite any previous file of the same name and location.");
			filename = input.nextLine();
		}while (!CreateFile.checkFilename(filename));
		
		input.close();
		
		try 
		{
			Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filename + ".txt"), "utf-8"));
			writer.write(raw);
			System.out.println("File " + filename + ".txt has been created.");
			writer.close();
		}
		catch (IOException e) 
		{
			e.printStackTrace();
		}
		
	}

}
